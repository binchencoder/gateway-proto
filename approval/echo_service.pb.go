// Code generated by protoc-gen-go. DO NOT EDIT.
// source: approval/echo_service.proto

package approval

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Embedded struct {
	// Types that are valid to be assigned to Mark:
	//	*Embedded_Progress
	//	*Embedded_Note
	Mark                 isEmbedded_Mark `protobuf_oneof:"mark"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Embedded) Reset()         { *m = Embedded{} }
func (m *Embedded) String() string { return proto.CompactTextString(m) }
func (*Embedded) ProtoMessage()    {}
func (*Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_323eb0b4a36dcb11, []int{0}
}

func (m *Embedded) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Embedded.Unmarshal(m, b)
}
func (m *Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Embedded.Marshal(b, m, deterministic)
}
func (m *Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Embedded.Merge(m, src)
}
func (m *Embedded) XXX_Size() int {
	return xxx_messageInfo_Embedded.Size(m)
}
func (m *Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_Embedded proto.InternalMessageInfo

type isEmbedded_Mark interface {
	isEmbedded_Mark()
}

type Embedded_Progress struct {
	Progress int64 `protobuf:"varint,1,opt,name=progress,proto3,oneof"`
}

type Embedded_Note struct {
	Note string `protobuf:"bytes,2,opt,name=note,proto3,oneof"`
}

func (*Embedded_Progress) isEmbedded_Mark() {}

func (*Embedded_Note) isEmbedded_Mark() {}

func (m *Embedded) GetMark() isEmbedded_Mark {
	if m != nil {
		return m.Mark
	}
	return nil
}

func (m *Embedded) GetProgress() int64 {
	if x, ok := m.GetMark().(*Embedded_Progress); ok {
		return x.Progress
	}
	return 0
}

func (m *Embedded) GetNote() string {
	if x, ok := m.GetMark().(*Embedded_Note); ok {
		return x.Note
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Embedded) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Embedded_Progress)(nil),
		(*Embedded_Note)(nil),
	}
}

type SimpleMessage struct {
	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int64  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// Types that are valid to be assigned to Code:
	//	*SimpleMessage_LineNum
	//	*SimpleMessage_Lang
	Code   isSimpleMessage_Code `protobuf_oneof:"code"`
	Status *Embedded            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are valid to be assigned to Ext:
	//	*SimpleMessage_En
	//	*SimpleMessage_No
	Ext                  isSimpleMessage_Ext `protobuf_oneof:"ext"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SimpleMessage) Reset()         { *m = SimpleMessage{} }
func (m *SimpleMessage) String() string { return proto.CompactTextString(m) }
func (*SimpleMessage) ProtoMessage()    {}
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_323eb0b4a36dcb11, []int{1}
}

func (m *SimpleMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleMessage.Unmarshal(m, b)
}
func (m *SimpleMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleMessage.Marshal(b, m, deterministic)
}
func (m *SimpleMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleMessage.Merge(m, src)
}
func (m *SimpleMessage) XXX_Size() int {
	return xxx_messageInfo_SimpleMessage.Size(m)
}
func (m *SimpleMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleMessage proto.InternalMessageInfo

func (m *SimpleMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SimpleMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type isSimpleMessage_Code interface {
	isSimpleMessage_Code()
}

type SimpleMessage_LineNum struct {
	LineNum int64 `protobuf:"varint,3,opt,name=line_num,json=lineNum,proto3,oneof"`
}

type SimpleMessage_Lang struct {
	Lang string `protobuf:"bytes,4,opt,name=lang,proto3,oneof"`
}

func (*SimpleMessage_LineNum) isSimpleMessage_Code() {}

func (*SimpleMessage_Lang) isSimpleMessage_Code() {}

func (m *SimpleMessage) GetCode() isSimpleMessage_Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *SimpleMessage) GetLineNum() int64 {
	if x, ok := m.GetCode().(*SimpleMessage_LineNum); ok {
		return x.LineNum
	}
	return 0
}

func (m *SimpleMessage) GetLang() string {
	if x, ok := m.GetCode().(*SimpleMessage_Lang); ok {
		return x.Lang
	}
	return ""
}

func (m *SimpleMessage) GetStatus() *Embedded {
	if m != nil {
		return m.Status
	}
	return nil
}

type isSimpleMessage_Ext interface {
	isSimpleMessage_Ext()
}

type SimpleMessage_En struct {
	En int64 `protobuf:"varint,6,opt,name=en,proto3,oneof"`
}

type SimpleMessage_No struct {
	No *Embedded `protobuf:"bytes,7,opt,name=no,proto3,oneof"`
}

func (*SimpleMessage_En) isSimpleMessage_Ext() {}

func (*SimpleMessage_No) isSimpleMessage_Ext() {}

func (m *SimpleMessage) GetExt() isSimpleMessage_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *SimpleMessage) GetEn() int64 {
	if x, ok := m.GetExt().(*SimpleMessage_En); ok {
		return x.En
	}
	return 0
}

func (m *SimpleMessage) GetNo() *Embedded {
	if x, ok := m.GetExt().(*SimpleMessage_No); ok {
		return x.No
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleMessage_LineNum)(nil),
		(*SimpleMessage_Lang)(nil),
		(*SimpleMessage_En)(nil),
		(*SimpleMessage_No)(nil),
	}
}

func init() {
	proto.RegisterType((*Embedded)(nil), "ease.gateway.approval.proto.Embedded")
	proto.RegisterType((*SimpleMessage)(nil), "ease.gateway.approval.proto.SimpleMessage")
}

func init() { proto.RegisterFile("approval/echo_service.proto", fileDescriptor_323eb0b4a36dcb11) }

var fileDescriptor_323eb0b4a36dcb11 = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0xcd, 0x4a, 0x8a, 0xa3, 0x4c, 0x68, 0x09, 0x4b, 0x4b, 0x55, 0x3b, 0xa5, 0x46, 0xb4, 0x60,
	0x7c, 0xd0, 0x62, 0xf7, 0x50, 0x28, 0xf4, 0x62, 0x9a, 0x92, 0x4b, 0x7b, 0x50, 0x6e, 0xbe, 0x98,
	0xb5, 0x77, 0x50, 0x44, 0xa5, 0x5d, 0x21, 0xad, 0xdd, 0x18, 0xe1, 0x4b, 0x69, 0xbf, 0xa0, 0xd0,
	0xcf, 0xe8, 0x2d, 0x5f, 0xd2, 0x5f, 0xe8, 0x6f, 0x14, 0xca, 0xae, 0xac, 0x42, 0x93, 0x60, 0xc8,
	0x21, 0xb7, 0x9d, 0x79, 0x33, 0xef, 0xcd, 0xbc, 0x1d, 0xe8, 0xf1, 0xa2, 0x28, 0xd5, 0x8a, 0x67,
	0x0c, 0x17, 0x17, 0x6a, 0x56, 0x61, 0xb9, 0x4a, 0x17, 0x18, 0x15, 0xa5, 0xd2, 0x8a, 0xf6, 0x90,
	0x57, 0x18, 0x25, 0x5c, 0xe3, 0x67, 0xbe, 0x8e, 0xda, 0xca, 0x06, 0xec, 0x9e, 0x24, 0x4a, 0x25,
	0x19, 0x32, 0x5e, 0xa4, 0x8c, 0x4b, 0xa9, 0x34, 0xd7, 0xa9, 0x92, 0x55, 0x83, 0x86, 0xef, 0xc1,
	0x3f, 0xcd, 0xe7, 0x28, 0x04, 0x0a, 0x7a, 0x02, 0x7e, 0x51, 0xaa, 0xa4, 0xc4, 0xaa, 0x0a, 0x48,
	0x9f, 0x0c, 0xdc, 0xb3, 0xbd, 0xf8, 0x5f, 0x86, 0x3e, 0x02, 0x4f, 0x2a, 0x8d, 0x81, 0xd3, 0x27,
	0x83, 0xc3, 0xb3, 0xbd, 0xd8, 0x46, 0x93, 0x0e, 0x78, 0x39, 0x2f, 0x3f, 0x85, 0x7f, 0x08, 0x3c,
	0x38, 0x4f, 0xf3, 0x22, 0xc3, 0x0f, 0x58, 0x55, 0x3c, 0x41, 0xfa, 0x10, 0x9c, 0x54, 0x58, 0x9e,
	0xc3, 0xd8, 0x49, 0x05, 0x3d, 0x06, 0x57, 0x2e, 0x73, 0xdb, 0xee, 0xc6, 0xe6, 0x49, 0x7b, 0xe0,
	0x67, 0xa9, 0xc4, 0x99, 0x49, 0xbb, 0x5b, 0xbd, 0x03, 0x93, 0xf9, 0xb8, 0xcc, 0x8d, 0x5c, 0xc6,
	0x65, 0x12, 0x78, 0xad, 0x9c, 0x89, 0xe8, 0x5b, 0xe8, 0x54, 0x9a, 0xeb, 0x65, 0x15, 0xec, 0xf7,
	0xc9, 0xe0, 0x68, 0xfc, 0x32, 0xda, 0xb1, 0x7a, 0xd4, 0x6e, 0x16, 0x6f, 0x9b, 0xe8, 0x31, 0x38,
	0x28, 0x83, 0x8e, 0xd5, 0x22, 0xb1, 0x83, 0x92, 0xbe, 0x06, 0x47, 0xaa, 0xe0, 0xe0, 0x0e, 0x64,
	0xa6, 0x51, 0x2a, 0xb3, 0xf8, 0x42, 0x09, 0x9c, 0xec, 0x83, 0x8b, 0x97, 0x7a, 0x7c, 0xe5, 0xc1,
	0xd1, 0xe9, 0xe2, 0x42, 0x9d, 0x37, 0x1f, 0x43, 0x7f, 0x38, 0xe0, 0x99, 0x98, 0x0e, 0x77, 0x92,
	0xfe, 0x67, 0x59, 0xf7, 0x0e, 0xb5, 0xe1, 0x15, 0xf9, 0xf2, 0xeb, 0xf7, 0x77, 0xe7, 0x27, 0x09,
	0x1f, 0xb3, 0xd5, 0x88, 0xe1, 0x25, 0x37, 0xa8, 0xbd, 0x0e, 0x56, 0xa7, 0x62, 0x33, 0x7d, 0x46,
	0x7b, 0xb7, 0x02, 0xac, 0x96, 0xcb, 0x7c, 0x33, 0x7d, 0x41, 0xc3, 0x1d, 0x30, 0xab, 0x8d, 0xdd,
	0x9b, 0xe9, 0x88, 0xb2, 0xeb, 0x55, 0xa3, 0x6d, 0x59, 0xfb, 0x75, 0x1b, 0x56, 0x37, 0xee, 0x46,
	0xe6, 0x20, 0x6e, 0xd5, 0x1d, 0xb3, 0x5a, 0xaa, 0x06, 0xa6, 0x5f, 0x09, 0xf8, 0xc6, 0x98, 0x89,
	0x12, 0xeb, 0x7b, 0x33, 0xa7, 0x6f, 0xbd, 0xe9, 0xde, 0xb4, 0x66, 0x36, 0x57, 0x62, 0xfd, 0x86,
	0x0c, 0xe9, 0x37, 0x02, 0x60, 0xc6, 0x78, 0x87, 0x19, 0x6a, 0xbc, 0xb7, 0x41, 0x9e, 0xdb, 0x41,
	0x9e, 0x0e, 0x9f, 0xdc, 0x18, 0x44, 0x58, 0xe1, 0x09, 0x4c, 0xfd, 0x96, 0x60, 0xde, 0xb1, 0x0c,
	0xaf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x75, 0x9f, 0x96, 0x88, 0xec, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/ease.gateway.approval.proto.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/ease.gateway.approval.proto.EchoService/EchoBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/ease.gateway.approval.proto.EchoService/EchoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	Echo(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoBody(context.Context, *SimpleMessage) (*SimpleMessage, error)
	EchoDelete(context.Context, *SimpleMessage) (*SimpleMessage, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ease.gateway.approval.proto.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ease.gateway.approval.proto.EchoService/EchoBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoBody(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ease.gateway.approval.proto.EchoService/EchoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoDelete(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ease.gateway.approval.proto.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "EchoBody",
			Handler:    _EchoService_EchoBody_Handler,
		},
		{
			MethodName: "EchoDelete",
			Handler:    _EchoService_EchoDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "approval/echo_service.proto",
}
